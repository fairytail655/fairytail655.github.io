<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用命令总结</title>
      <link href="/2021/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li>目录切换 <code>cd</code></li><li>目录创建 <code>mkdir</code></li><li>查看目录内容 <code>ls [-l|a] [dir]</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20190428140017647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Jvb2tpZXhpYW9NdV9h,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><span id="more"></span><ul><li><p>权限修改 <code>chmod [a|u|g|o][+|-|=][r|w|x|-] file</code> </p></li><li><p>文件搜索 <code>find [dir] [-name file/dir]</code></p></li><li><p>文件重命名/移动 <code>mov</code></p></li><li><p>复制 <code>cp [-r] src des</code></p></li><li><p>文件内容显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat file# 显示文件所有的内容</span><br><span class="line">more file# 显示一屏就暂停</span><br><span class="line">less file# 向前向后翻页显示文件</span><br><span class="line">head [-n num] file # 显示文件前num(默认10)行</span><br><span class="line">tail [-n num] file# 显示文件后num(默认10)行</span><br></pre></td></tr></table></figure></li><li><p>创建文件 <code>touch</code></p></li><li><p>文件压缩/解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar [options] des src</span><br><span class="line">[options]: -c压缩</span><br><span class="line">-x解压</span><br><span class="line">-v  显示过程详细信息</span><br><span class="line">-jbzip2</span><br><span class="line">-zgzip</span><br><span class="line">examples:</span><br><span class="line">tar -cjf test.tar.bz2 test# 将 test 压缩成 test.tar.bz2</span><br><span class="line">tar -xjf test.tar.bz2# 将 test.tar.bz2 解压为 test</span><br><span class="line">tar -czf test.tar.gz test# 将 test 压缩成 test.tar.gz</span><br><span class="line">tar -xzf test.tar.gz# 将 test.tar.gz 解压为 test</span><br></pre></td></tr></table></figure></li><li><p>查看当前路径 <code>pwd</code></p></li><li><p>查看进程 <code>ps [a|u|x]</code></p></li><li><p>关闭进程 <code>kill -9 process_id</code></p></li><li><p>通过管道查找字符串 <code>ll | grep test</code></p></li><li><p>关机 <code>shutdown -h now</code></p></li><li><p>重启 <code>reboot</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git使用总结</title>
      <link href="/2021/06/04/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Ubuntu18.04</li><li>Git 2.17.1</li><li>Github</li></ul><span id="more"></span><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ol><li> 本地新建文件夹 <span style='color:blue'>hello_world</span> 及其目录下的 <span style='color:blue'>main.c</span></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello_world</span><br><span class="line">cd hello_world/</span><br><span class="line">touch hello_world.c</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化本地 Git 项目, 将 <span style='color:blue'>main.c</span> 添加进去并提交到本地仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add main.c</span><br><span class="line">git commit -m &quot;init&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 GitHub 上新建项目 <span style='color:blue'>hello_world</span> , 使用网页上提供的命令, 将本地仓库推送到云端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/fairytail655/hello_world.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="提交项目"><a href="#提交项目" class="headerlink" title="提交项目"></a>提交项目</h3><ol><li>从 Github 下载项目 <span style='color:blue'>hello_world</span> 到本地</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fairytail655/hello_world.git</span><br><span class="line">cd hello_world/</span><br></pre></td></tr></table></figure><ol start="2"><li>新建并进入分支 <span style='color:blue'>local</span> , 向 Github 提交该分支</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b local</span><br><span class="line">git push --set-upstream origin local</span><br></pre></td></tr></table></figure><ol start="3"><li>修改本地 <span style='color:blue'>main.c</span> 文件, 并提交修改, 模拟本地项目开发</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world 1&quot; &gt;&gt; main.c</span><br><span class="line">git add main.c # 或者使用 git add * 添加所有修改</span><br><span class="line">git commit -m &quot;push_test1&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;hello world 2&quot; &gt;&gt; main.c</span><br><span class="line">git add main.c # 或者使用 git add * 添加所有修改</span><br><span class="line">git commit -m &quot;push_test2&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在 Github 上修改分支 <span style='color:blue'>main</span> 下的 <span style='color:blue'>main.c</span> 文件, 模拟同事协作开发</p></li><li><p>本地切换至分支 <span style='color:blue'>main</span>, 从 Github 下拉最新的修改</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><ol start="6"><li>本地切换至分支 <span style='color:blue'>local</span>, 合并之前的 commit 为一个完整的 commit</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout local</span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><ol start="7"><li>合并分支 <span style='color:blue'>main</span>, 并提交到 Github</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase main</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol start="8"><li>在 Github 上查看分支 <span style='color:blue'>local</span> 下的 <span style='color:blue'>main.c</span> 文件, 可以发现修改上传成功</li></ol><h3 id="其他常见操作"><a href="#其他常见操作" class="headerlink" title="其他常见操作"></a>其他常见操作</h3><ol><li>查看文件提交状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ol start="2"><li>查看修改历史</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><ol start="3"><li>撤销文件修改</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- [file_name]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编程规范总结</title>
      <link href="/2021/06/04/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h3><p>Apache License 2.0</p><span id="more"></span><h3 id="C代码风格"><a href="#C代码风格" class="headerlink" title="C代码风格"></a>C代码风格</h3><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul><li>只作用于单个文件内的变量或函数应声明为 <code>static</code>.</li><li>需要被外部调用的变量或函数应以所在组件或模块名为前缀, 如 <code>esp_vfs_register()</code>.</li><li>静态变量应以 <code>s_</code> 开头.</li><li>避免不必要的缩写, 如不应采用 <code>data -&gt; dat</code>.</li></ul><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>单次缩进为 4 个空格, 不应插入 tabs 进行缩进.</p><h4 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h4><ul><li>相邻函数间隔 1 个空行.</li><li>函数起始行和终止行不应为空行.</li><li>在不影响代码可读性的前提下, 单行长度最大为 120 个字符.</li></ul><h4 id="水平方向"><a href="#水平方向" class="headerlink" title="水平方向"></a>水平方向</h4><ul><li><p>在 <code>if, switch, for</code> 等关键词和邻近括号间添加 1 个空格, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (contion) &#123;<span class="comment">// 正确</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(contion) &#123;<span class="comment">// 错误</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二元运算符(如 <code>+, -</code> 等)应在两边添加空格(<code>*, /, ., -&gt;</code> 除外), 一元运算符无需空格.</p></li><li><p>有些情况可以通过添加空格増强代码可读性, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_D6,   I2S0I_DATA_IN14_IDX, <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_D7,   I2S0I_DATA_IN15_IDX, <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_HREF, I2S0I_H_ENABLE_IDX,  <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_PCLK, I2S0I_DATA_IN15_IDX, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>行尾不能有空白.</p></li></ul><h4 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h4><ul><li><p>函数首行与花括号应分离为两行, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> arg)</span><span class="comment">// 正确</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;<span class="comment">// 错误</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数体内的分支语句与邻近的花括号应放置在同一行, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    do_one();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (other_condition) &#123;</span><br><span class="line">    do_two();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li><p>单行注释应使用 <code>//</code>, 多行注释使用 <code>//</code> 和 <code>/* */</code> 均可.</p></li><li><p>不必要的注释代码应删除, 如果该代码确实需要(如未实现的接口函数), 则添加注释, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_something</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setup_dma();</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> we should load resources here, but loader is not fully integrated yet.</span></span><br><span class="line">    <span class="comment">// load_resources();</span></span><br><span class="line">    start_timer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>#if 0 .. #endif</code>同上一点.</p></li><li><p>不应添加作者和改动日期相关的琐碎的注释.</p></li></ul><h4 id="行尾"><a href="#行尾" class="headerlink" title="行尾"></a>行尾</h4><p>所有行应以 Unix 风格的 <strong>LF</strong> 结尾.</p><h4 id="格式化工具"><a href="#格式化工具" class="headerlink" title="格式化工具"></a>格式化工具</h4><ul><li><p>安装 <code>astyle</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install astyle</span><br></pre></td></tr></table></figure></li><li><p>使用 ESP-IDF 目录下的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools/format.sh test/test.c</span><br></pre></td></tr></table></figure></li></ul><h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>采用”蛇形命名法”并以 <code>_t</code> 结尾.</p><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><p>应通过 <code>typedef</code> 定义, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MODULE_FOO_ONE,</span><br><span class="line">    MODULE_FOO_TWO,</span><br><span class="line">    MODULE_FOO_THREE</span><br><span class="line">&#125; <span class="keyword">module_foo_t</span>;</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><ul><li><p><code>assert.h</code> 中的 <code>assert()</code> 用来检查条件是否为<code>true</code>, 如果条件为<code>false</code>或0, 该函数将调用<code>abort()</code>并触发严重错误.</p></li><li><p><code>assert()</code>仅用于检查不可恢复错误.</p></li><li><p>检查 <code>esp_err_t</code>类型的值应使用 <span style='color:blue'>ESP_ERROR_CHECK</span> 宏.</p></li><li><p>可以通过配置 ESP-IDF 项目来失能断言功能, 这样可能会导致”变量定义但未使用”的警告, 可以通过以下方法来避免:</p><ul><li><p><strong>(void)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = do_something();</span><br><span class="line">assert(res == <span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>)res;</span><br></pre></td></tr></table></figure></li><li><p><strong><strong>attribute</strong>((unused))</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res __attribute__((unused));</span><br><span class="line"></span><br><span class="line">res = do_something();</span><br><span class="line">assert(res == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">res = do_something_else();</span><br><span class="line">assert(res != <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="头文件保护"><a href="#头文件保护" class="headerlink" title="头文件保护"></a>头文件保护</h4><ul><li><p>面向公共的头文件应使用预处理保护, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FILE_NAME_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_NAME_H</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FILE_NAME_H</span></span></span><br></pre></td></tr></table></figure></li><li><p>为了能够被 C++ 代码使用, C 的头文件应使用 <code>extern &quot;C&quot;</code>, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* declarations go here */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Include声明"><a href="#Include声明" class="headerlink" title="Include声明"></a>Include声明</h4><ul><li>C 标准库头文件和其他 POSIX 头文件应使用<code>&lt; &gt;</code>(如<code>#include &lt;stdio.h&gt;</code>).</li><li>其他头文件使用<code>&quot; &quot;</code>.</li><li>遵循以下顺序:<ul><li>C 标准库头文件.</li><li>其他 POSIX 头文件及其通用扩展(如<code>sys/queue.h</code>).</li><li>通用 IDF 头文件(如<code>esp_log.h</code>).</li><li>其他组件头文件(如 FreeRTOS).</li><li>当前组件公共头文件.</li><li>私有头文件.</li></ul></li></ul><h3 id="C-代码风格"><a href="#C-代码风格" class="headerlink" title="C++代码风格"></a>C++代码风格</h3><p>C 代码风格同样适用于 C++ , 下面的内容将进行更多的补充.</p><h4 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h4><p>头文件扩展名为<code>.hpp</code>, 源文件扩展名为<code>.cpp</code>.</p><h4 id="其他命名"><a href="#其他命名" class="headerlink" title="其他命名"></a>其他命名</h4><ul><li><strong>类</strong>和<strong>结构体</strong>应采用首字母大写的”驼峰命名法”, 成员变量和方法应采用”蛇形命名法”.</li><li><strong>命名空间</strong>采用”蛇形命名法”.</li><li>在函数声明的上一行指定<strong>模板</strong>.</li><li>在面向对象编程中, <strong>接口</strong>不应以<code>...接口名</code>为后缀.</li></ul><h4 id="类中成员的顺序"><a href="#类中成员的顺序" class="headerlink" title="类中成员的顺序"></a>类中成员的顺序</h4><ul><li>公有 -&gt; 保护 -&gt; 私有, 省略没有任何成员的部分.</li><li>构造 -&gt; 解析 -&gt; 成员函数 -&gt; 成员变量.</li></ul><h4 id="缩进-1"><a href="#缩进-1" class="headerlink" title="缩进"></a>缩进</h4><ul><li>命名空间内不应缩进.</li><li><strong>类名</strong>, <code>public</code> , <code>protected</code>, <code>private</code>标签的缩进保持一致.</li></ul><h3 id="CMake代码风格"><a href="#CMake代码风格" class="headerlink" title="CMake代码风格"></a>CMake代码风格</h3><ul><li>采用 4 空格缩进.</li><li>单行最大长度为 120 个字符, 单行分离时要保证可读性.</li><li>不应在可选括号内填入内容, 如<code>endforeach()</code>, <code>endif()</code>.</li><li>命令, 函数和宏使用小写命名.</li><li>本地作用域变量使用小写.</li><li>全局作用域变量使用大写.</li><li>其他遵循 <code>cmake-lint</code> 项目的默认设置.</li></ul><h3 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h3><p>代码风格工具</p>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
