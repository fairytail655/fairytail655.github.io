<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ESP32-S2 芯片笔记</title>
      <link href="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/54416e9ebcfd7414980e539e258377b1.png" alt="截图"></p><span id="more"></span><h1 id="芯片命名"><a href="#芯片命名" class="headerlink" title="芯片命名"></a>芯片命名</h1><p><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/13fe81e00266bfffe4ee79493731e190.png" alt="截图"></p><h1 id="协处理器"><a href="#协处理器" class="headerlink" title="协处理器"></a>协处理器</h1><ul><li>架构:<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/de0dc2179fc26d89dbfe9c41bce2f6b0.png" alt="截图"></li><li><strong>ULP-RISC-V</strong> 支持用户使用 C 语言编写程序, 然后使用编译器将程序编译成 RV32IMC 标准指令码.</li><li><strong>ULP-FSM</strong> 不支持高级语言, 需使用 ULP-FSM 专门指令集进行编程.</li></ul><h1 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h1><ul><li>包括三种 DMA: <strong>Internal DMA</strong>, <strong>EDMA</strong> 和 <strong>Copy DMA</strong>.<ul><li><p><strong>Internal DMA</strong>: 只能访问片内 RAM, 用于内存与外设之间的数据传输.</p></li><li><p><strong>EDMA</strong>: 既能访问片内 RAM 也能访问片外 RAM, 用于存储器与外设之间的数据传输.</p></li><li><p><strong>Copy DMA</strong>: 只能访问片内 RAM, 用于内存与内存之间的高速数据传输.</p></li></ul></li><li>支持的模块和传输类型:<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/08d41dbb29c1a81c0460fcb9c2b53c9e.png" alt="截图"></li><li>描述符的第三个 word 指示的地址只能在片内, 指向下一个可用描述符, 所有描述符都需存在内存中.</li></ul><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><ul><li>地址映射:<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/3c819eca8bcc98071a4cc3118388ca97.png" alt="截图"><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/0673399f39b48bbd09b5f4aec530ac79.png" alt="截图"><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/26c40910e1addb49ec046861c48ae0b7.png" alt="截图"><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/8c2e69bb9318da03653472b6c6c247d4.png" alt="截图"><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/0dd0cf398d383e3986e371a2ca912ef5.png" alt="截图"></li><li>外设总线:<ul><li><p><strong>PeriBus1</strong>: 0x3F40_0000 ~ 0x3F4F_FFFF.</p></li><li><p><strong>PeriBus2</strong>: 0x6000_0000 ~ 0x600B_FFFF, 0x6180_0000 ~ 0x6180_3FFF</p></li><li><p>相比于 CPU 通过 <strong>PeriBus2</strong> 访问模块 / 外设, CPU 通过 <strong>PeriBus1</strong> 访问模块 / 外设效率更高. </p><p>但是 <strong>PeriBus1</strong> 有预测性读的特点, 不能保证每一次的读访问都是真实有效的.</p><p>因此, 在访问模块 / 外设中的某些特殊寄存器如 FIFO 寄存器时, 必须使用 <strong>PeriBus2</strong> 进行访问.</p></li><li><p><strong>PeriBus1</strong> 会打乱总线上的读写操作的先后顺序以提升性能, 这可能会导致对读写操作的先后顺序有严格要求的程序发生崩溃.</p><p>对于这种情况, 在程序语句之前增加 <em><strong>volatile</strong></em>, 也可以改用 <strong>PeriBus2</strong> 进行访问.</p></li><li><p><strong>PeriBus1</strong> 访问受限地址列表:</p><p><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/b46c0b28041e1ba2968930d8b4ede3e3.png" alt="截图"></p></li></ul></li></ul><h1 id="复位"><a href="#复位" class="headerlink" title="复位"></a>复位</h1><ul><li>复位等级:<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/9a4f22fb9645d1b19b2390d1f325b7c9.png" alt="截图"></li><li>复位释放后, CPU 可以通过读取寄存器 <strong>RTC_CNTL_RESET_CAUSE_PROCPU</strong> 来获取复位源.</li></ul><h1 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h1><ul><li>时钟树<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/a8607c8412b6768f4fab843b07e2b61a.png" alt="截图"></li><li>时钟源:<ul><li><strong>PLL_CLK</strong>: 320 MHz 或 480 MHz 内部 PLL 时钟.</li><li><strong>XTAL_CLK</strong>: 40 MHz 外部晶振时钟.</li><li><strong>XTAL32K_CLK</strong>: 32 kHz 外部晶振时钟.</li><li><strong>RTC8M_CLK</strong>: 内置 8 MHz 振荡器的 N 分频时钟, 频率可调.</li><li><strong>RTC8M_D256_CLK</strong>: 由 RTC8M_CLK 经 256 分频所得, 频率为 RTC8M_CLK / 256.</li><li><strong>RTC_CLK</strong>: 90 kHz 内部低功耗时钟, 频率可调.</li><li><strong>APLL_CLK</strong>: 16 MHz ~ 128 MHz 内部 Audio PLL 时钟.</li></ul></li></ul><h1 id="Boot"><a href="#Boot" class="headerlink" title="Boot"></a>Boot</h1><ul><li><p>Strapping 管脚: <strong>GPIO0</strong>(上拉)、<strong>GPIO45</strong>(下拉) 和 <strong>GPIO46</strong>(下拉).</p></li><li><p><strong>启动模式</strong>:</p><p><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/33b64dfc0322f9114612eae510225b52.png" alt="截图"></p><p>在 <strong>SPI Boot</strong> 模式下, CPU 通过从 SPI Flash 中读取程序来启动系统.</p><p>在 <strong>Download Boot</strong> 模式下, 用户可以通过 UART0、UART1、QPI 或 USB 接口将代码下载到 SRAM 或 Flash 中, 或者将程序加载到 SRAM 中并在 Download Boot 模式下执行程序.</p></li><li><p>ROM Code 打印</p><p><strong>GPIO46</strong> 与 eFuse <strong>UART_PRINT_CONTROL</strong> 一起控制 ROM Code 打印.</p><p><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/a7b76beac993ca39a07b691c0e6137f2.png" alt="截图"></p><p>ROM Code 上电打印默认通过 U0TXD 管脚, 可以由 eFuse UART_PRINT_CHANNEL (0: UART0; 1: DAC_1) 控制切换到 DAC_1 管脚.</p></li></ul><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><ul><li>支持 6 级中断, 数字<strong>越大</strong>代表中断优先级<strong>越高</strong>.其中, NMI 拥有最高优先级, 一旦 NMI 中断发生,CPU 必定会响应.</li><li>CPU 中断:<img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/cbc1468e372a6e03a9a399fa808e49f1.png" alt="截图"><img src="/2021/06/16/ESP32-S2%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/2c191bb01f8a89911085d110e4b124d3.png" alt="截图"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ESP32 芯片笔记</title>
      <link href="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h1><p><img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/a7ab087afd3a781db9598bdaf10ad307.png" alt="截图"></p><span id="more"></span><h1 id="芯片命名"><a href="#芯片命名" class="headerlink" title="芯片命名"></a>芯片命名</h1><p><img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/01befe492f4e0888c10162273d973d11.png" alt="截图"></p><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><ul><li>RTC 存储器为 SRAM.</li><li>地址映射:<img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/508ae36a7b80bce2989e8b5b5dd3cc25.png" alt="截图"><img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/3755a491ad6a0b6f84d94b925e1e052b.png" alt="截图"><img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/40e740df4e9b217fc2a3647ce43b5511.png" alt="截图"></li><li>Internal SRAM1 通过<strong>数据总线</strong>和<strong>指令总线</strong>访问的字(32位)是<strong>逆序</strong>的, 如: 0x3FFE_0000 与 0x400B_FFFC 访问到相同的字.</li><li>PRO_CPU 通过<strong>数据总线</strong>和<strong>指令总线</strong>访问 <strong>RTC FAST Memory</strong> 的字(32位)是同序的, 如: 0x3FF8_0000 与 0x400C_0000 访问到相同的字.</li><li>开启 Cache 功能后, <strong>POOL0</strong> 或者 <strong>POOL1</strong> 只作为 cache memory 使用,不能复用作为<strong>指令总线</strong>的访问区域.</li><li>每个 CPU 访问的 <strong>PID Controller</strong> 是独立的(APP_CPU 和 PRO_CPU 访问该外设同一地址的数据不同).</li><li>外设中只有 <strong>SDIO Slave</strong> 的地址空间不连续.</li><li>使用 (0x3FF40000 + n) 地址和使用 (0x60000000 + n) 地址访问的内容是相同的,其中 n = 0 ~ 0x3FFFF.</li><li>相比于通过 AHB 访问外设, CPU 通过 DPORT 访问外设效率更高. 但是 DPORT 有预测性读 (speculative read) 的特点,不能保证每一次的读访问都是真实有效的. 另外,DPORT 会打乱总线上的读写操作的先后顺序以提升性能, 这可能会导致对读写操作的先后顺序有严格要求的程序发生崩溃. 此外使用 AHB 总线读 FIFO 会出现无法预知的错误.</li></ul><h1 id="Boot"><a href="#Boot" class="headerlink" title="Boot"></a>Boot</h1><ul><li>共有 5 个 Strapping 管脚: <strong>MTDI</strong>, <strong>GPIO0</strong>, <strong>GPIO2</strong>, <strong>MTDO</strong>, <strong>GPIO5</strong>.</li><li>启动模式:<img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/e2e52946387ad66208cef2e640075a21.png" alt="截图"></li></ul><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><ul><li>中断结构:<img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/21b5a74caa279743708dced6323ffb1c.png" alt="截图"></li><li>输入为 <strong>71</strong> 个外部中断源, 输出给每个 CPU 各自 <strong>26</strong> 个外部中断(共 <strong>52</strong> 个).</li><li>71 个中断源中, <strong>GPIO_INTERRUPT_PRO</strong> 和 <strong>GPIO_INTERRUPT_PRO_NMI</strong> 只可以分配给 <strong>PRO_CPU</strong>, <strong>GPIO_INTERRUPT_APP</strong> 和 <strong>GPIO_INTERRUPT_APP_NMI</strong> 只可以分配给 <strong>APP_CPU</strong>.</li><li>两个 CPU(PRO_CPU 和 APP_CPU)各有 <strong>32</strong> 个中断, 其中 <strong>26</strong> 个为<strong>外部中断</strong>, <strong>6</strong> 个为<strong>内部中断</strong>.</li><li>中断优先级:<img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/fb19c143d8b2803c4992da3ac6c4bba8.png" alt="截图"></li><li>能够暂时屏蔽所有被分配到 CPU 的外部中断源的 <strong>NMI</strong> 中断信号.</li></ul><h1 id="复位"><a href="#复位" class="headerlink" title="复位"></a>复位</h1><ul><li>复位影响范围:<img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/65d3b6e9b6ed976f14d378a2b60056d1.png" alt="截图"></li><li><strong>PRO_CPU</strong> 可以通过读取寄存器 <strong>RTC_CNTL_RESET_CAUSE_PROCPU</strong> 来获取复位源, <strong>APP_CPU</strong> 则可以通过读取寄存器 <strong>RTC_CNTL_RESET_CAUSE_APPCPU</strong> 来获取复位源.</li></ul><h1 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h1><ul><li>时钟源<ul><li><strong>PLL_CLK</strong>, 320 MHz 或 480 MHz 内部 PLL 时钟</li><li><strong>XTL_CLK</strong>, 2 ~ 40 MHz 外部晶振时钟</li><li><strong>XTL32K_CLK</strong>, 32 KHz 外部晶振时钟</li><li><strong>RTC8M_CLK</strong>, 8 MHz 内部时钟, 频率可调</li><li><strong>RTC8M_D256_CLK</strong> 由 RTC8M_CLK 经 256 分频所得, 频率为(RTC8M_CLK/256). 当 RTC8M_CLK 的初始频率为 8 MHz 时, 该时钟以 31.250 KHz 的频率运行</li><li><strong>RTC_CLK</strong>, 150 KHz 内部低功耗时钟, 频率可调</li><li><strong>APLL_CLK</strong>, 16 ~ 128 MHz 内部 Audio PLL 时钟</li></ul></li><li>时钟信号<ul><li>CPU 时钟.</li><li>外设时钟: <code>APB_CLK</code>, <code>REF_TICK</code>, <code>LEDC_SCLK</code>, <code>APLL_CLK</code> 和 <code>PLL_D2_CLK</code>.</li></ul></li><li>Wi-Fi 和 BT 必须在 APB_CLK 时钟源选择 PLL_CLK 下才能工作.</li></ul><h1 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h1><p><img src="/2021/06/16/ESP32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/f07e5953fdc9efc24bb305f0f2ca1449.png" alt="截图"></p><ul><li>34 个 物理 GPIO pad: 0­-19, 21-­23, 25-­27, 32­-39. 其中 34-39 仅用作<strong>输入</strong>.</li><li>每个 pad 可以配置成 <strong>GPIO 功能</strong>或者<strong>直连功能</strong>.</li><li>162 个<strong>外设输入信号</strong>都可以选择任意一个 GPIO pad 的输入信号, 每个 GPIO pad 的输出信号可来自 176 个<strong>外设输出信号</strong>中的任意一个.</li><li>同一个输入 pad 上可以同时绑定多个内部输入信号, 某一个外设的输出信号可以同时从多个 pad 输出.</li><li>每个 IO pad(包括 RTC pad)都有单独的 hold 功能.</li></ul><h1 id="DPort"><a href="#DPort" class="headerlink" title="DPort"></a>DPort</h1><p>系统通过 DPort 寄存器中的配置寄存器对各个模块进行配置.</p><ul><li><strong>APP_CPU</strong> 从 ROM code 启动之后, 会跳转到 <strong>DPORT_APPCPU_BOOT_ADDR</strong> 寄存器中的地址.</li></ul><h1 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h1><ul><li>ESP32 中有 13 个外设都具有 DMA 功能, 这 13 个外设是: UARTn, SPIn, I2Sn、SDIO slave, SD/MMC host, EMAC, BT 和 Wi-Fi.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arduino 开发 ESP32</title>
      <link href="/2021/06/10/Arduino%E5%BC%80%E5%8F%91ESP32/"/>
      <url>/2021/06/10/Arduino%E5%BC%80%E5%8F%91ESP32/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu16.04</li><li>Arduino 1.8.15 ( &gt;= 1.8)</li><li>ESP32-DevKitC V4</li></ul><span id="more"></span><h1 id="IDE-添加-ESP32"><a href="#IDE-添加-ESP32" class="headerlink" title="IDE 添加 ESP32"></a>IDE 添加 ESP32</h1><ul><li>参考文档 <a href="https://github.com/espressif/arduino-esp32/blob/master/docs/arduino-ide/boards_manager.md">(1)</a> 和 <a href="https://dronebotworkshop.com/esp32-intro/">(2)</a>.</li><li>在 <strong>IDE</strong> 界面选择<code>File</code> -&gt; <code>Preferences</code>, 在 <code>Additional Boards Manager URLs</code>中添加 <strong>ESP32</strong> 的链接 <code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</code>.</li><li>在 <strong>IDE</strong> 界面选择 <code>Tools</code> -&gt; <code>Boards:...</code> -&gt; <code>Boards Manager</code>, 搜索并下载 <strong>ESP32</strong>. </li></ul><h1 id="编译-amp-烧录"><a href="#编译-amp-烧录" class="headerlink" title="编译&amp;烧录"></a>编译&amp;烧录</h1><ul><li><p>选择目标开发板</p><p>在 <strong>IDE</strong> 界面选择 <code>Tools</code> -&gt; <code>Boards:..</code> -&gt; <code>FireBeetle-ESP32</code></p></li><li><p>点击”Verify”按钮, 可能会报错:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exec</span>: <span class="string">&quot;python&quot;</span>: executable <span class="keyword">file</span> not found <span class="keyword">in</span> $PATH</span><br></pre></td></tr></table></figure><p>然而在 Ubuntu 终端可以直接调用 python 命令, 原因可能是终端处于 python 虚拟环境下, 但是 <strong>PATH</strong> 下并没有包含 python 路径.</p><p>所以可以创建软连接:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> /usr/bin/python 你的python路径</span><br></pre></td></tr></table></figure><p>  或者直接安装:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python</span><br></pre></td></tr></table></figure></li><li><p>选择对应的端口号, 点击”Upload”即可.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 下 ESP-IDF 使用总结</title>
      <link href="/2021/06/10/Eclipse%E4%B8%8BESP-IDF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/10/Eclipse%E4%B8%8BESP-IDF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu 18.04.5 LTS / Windows 7</li><li>Eclipse 2021-03</li><li>ESP32-S2-Kaluga-Kit</li></ul><span id="more"></span><h1 id="IDE-安装"><a href="#IDE-安装" class="headerlink" title="IDE 安装"></a>IDE 安装</h1><p><a href="https://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/2021-03/R/eclipse-cpp-2021-03-R-linux-gtk-x86_64.tar.gz">下载</a>解压后目录里有可执行文件 <code>eclipse</code>, 可以直接运行而无需安装 (注意是 <strong>for C/C++</strong> 版本 ).</p><h1 id="IDF-环境搭建"><a href="#IDF-环境搭建" class="headerlink" title="IDF 环境搭建"></a>IDF 环境搭建</h1><p>按照 <a href="https://github.com/espressif/idf-eclipse-plugin#esp-idf-eclipse-plugin">espressif/idf-eclipse-plugin</a> 中 <strong>Installing ESP-IDF</strong> 和 <strong>Installing ESP-IDF Tools</strong> 两节进行.</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><span style="color:red">通过<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s2/get-started/index.html#get-started-set-up-env">文档</a>中”第四步:设置环境变量”, 可能无法将 ESP-IDF 工具的路径加入系统环境变量 <strong>PATH</strong>, 所以需要人为确认是否成功设置了环境变量. 如果设置失败, 可以手动将命令执行窗口中输出的路径添加到 <strong>PATH</strong> 中.</span></p><h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>按照 <a href="https://github.com/espressif/idf-eclipse-plugin#esp-idf-eclipse-plugin">espressif/idf-eclipse-plugin</a> 中 <strong>Create a new Project</strong> 节进行.</p><h1 id="编译-amp-烧录程序"><a href="#编译-amp-烧录程序" class="headerlink" title="编译&amp;烧录程序"></a>编译&amp;烧录程序</h1><p>按照 <a href="https://github.com/espressif/idf-eclipse-plugin#esp-idf-eclipse-plugin">espressif/idf-eclipse-plugin</a> 中 <strong>Configuring Launch target</strong>, <strong>Compiling the Project</strong>, <strong>Flashing the Project</strong> 三节进行.</p><ul><li>烧录程序点击 <strong>Run</strong> 按钮即可.</li></ul><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="openocd"><a href="#openocd" class="headerlink" title="openocd"></a>openocd</h2><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>连接开发板后, 查看 USB 端口, 若用户组为 <strong>dialout</strong>, 如:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user<span class="literal">-name</span>@computer<span class="literal">-name</span>:~/esp<span class="variable">$</span> <span class="built_in">ls</span> <span class="literal">-l</span> /dev/ttyUSB*</span><br><span class="line">crw<span class="literal">-rw</span>---- <span class="number">1</span> root dialout <span class="number">188</span>, <span class="number">0</span> Jul <span class="number">10</span> <span class="number">19</span>:<span class="number">04</span> /dev/ttyUSB0</span><br><span class="line">crw<span class="literal">-rw</span>---- <span class="number">1</span> root dialout <span class="number">188</span>, <span class="number">1</span> Jul <span class="number">10</span> <span class="number">19</span>:<span class="number">04</span> /dev/ttyUSB1</span><br></pre></td></tr></table></figure><p>则需要进行如下操作 (详情见文档 <a href="https://sourceforge.net/p/openocd/code/ci/master/tree/README">[1]</a> 和 <a href="https://forgge.github.io/theCore/guides/running-openocd-without-sudo.html">[2]</a> ):</p><ul><li><p>添加当前用户到 <em><strong>plugdev</strong></em> 用户组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod <span class="literal">-a</span> <span class="literal">-G</span> plugdev <span class="variable">$</span>(whoami)</span><br></pre></td></tr></table></figure></li><li><p>创建  /etc/udev/rules.d/99-openocd.rules 文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/udev/rules.d/<span class="number">99</span><span class="literal">-openocd</span>.rules</span><br></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copy this file to /etc/udev/rules.d/</span></span><br><span class="line"></span><br><span class="line">ACTION!=<span class="string">&quot;add|change&quot;</span>, GOTO=<span class="string">&quot;openocd_rules_end&quot;</span></span><br><span class="line">SUBSYSTEM!=<span class="string">&quot;usb|tty|hidraw&quot;</span>, GOTO=<span class="string">&quot;openocd_rules_end&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please keep this list sorted by VID:PID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># opendous and estick</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;03eb&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;204f&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Original FT232/FT245 VID:PID</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;6001&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Original FT2232 VID:PID</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;6010&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Original FT4232 VID:PID</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;6011&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Original FT232H VID:PID</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;6014&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DISTORTEC JTAG-lock-pick Tiny 2</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;8220&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TUMPA, TUMPA Lite</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;8a98&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;8a99&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># XDS100v2</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;a6d0&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Xverve Signalyzer Tool (DT-USB-ST), Signalyzer LITE (DT-USB-SLITE)</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;bca0&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;bca1&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TI/Luminary Stellaris Evaluation Board FTDI (several)</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;bcd9&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TI/Luminary Stellaris In-Circuit Debug Interface FTDI (ICDI) Board</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;bcda&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># egnite Turtelizer 2</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;bdc8&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Section5 ICEbear</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;c140&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;c141&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Amontec JTAGkey and JTAGkey-tiny</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0403&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;cff8&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TI ICDI</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0451&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;c32a&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STLink v1</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0483&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;3744&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STLink v2</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0483&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;3748&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># STLink v2-1</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0483&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;374b&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hilscher NXHX Boards</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0640&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0028&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hitex STR9-comStick</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0640&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;002c&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hitex STM32-PerformanceStick</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0640&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;002d&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Amontec JTAGkey-HiSpeed</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;0fbb&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;1000&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IAR J-Link USB</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1366&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0101&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1366&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0102&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1366&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0103&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1366&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0104&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># J-Link-OB (onboard)</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1366&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0105&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Raisonance RLink</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;138e&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;9000&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debug Board for Neo1973</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1457&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;5118&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Olimex ARM-USB-OCD</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;15ba&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0003&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Olimex ARM-USB-OCD-TINY</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;15ba&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0004&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Olimex ARM-JTAG-EW</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;15ba&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;001e&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Olimex ARM-USB-OCD-TINY-H</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;15ba&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;002a&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Olimex ARM-USB-OCD-H</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;15ba&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;002b&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># USBprog with OpenOCD firmware</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1781&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;0c63&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TI/Luminary Stellaris In-Circuit Debug Interface (ICDI) Board</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;1cbe&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;00fd&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Marvell Sheevaplug</span></span><br><span class="line">ATTRS&#123;idVendor&#125;==<span class="string">&quot;9e88&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;9e8f&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMSIS-DAP compatible adapters</span></span><br><span class="line">ATTRS&#123;product&#125;==<span class="string">&quot;*CMSIS-DAP*&quot;</span>, MODE=<span class="string">&quot;664&quot;</span>, <span class="built_in">GROUP</span>=<span class="string">&quot;plugdev&quot;</span></span><br><span class="line"></span><br><span class="line">LABEL=<span class="string">&quot;openocd_rules_end&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>重启 <code>udev</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo udevadm trigger</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p>要按照<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s2/api-guides/jtag-debugging/configure-ft2232h-jtag.html">文档</a>配置驱动, 否则运行 <code>openocd -f board/esp32s2-kaluga-1.cfg</code> 可能会报错, 如下:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">For bug reports, read</span><br><span class="line">        http://openocd.org/doc/doxygen/bugs.html</span><br><span class="line">Info : Listening on port 6666 for tcl connections</span><br><span class="line">Info : Listening on port 4444 for telnet connections</span><br><span class="line"><span class="keyword">Error: </span>libusb_open() failed with LIBUSB_ERROR_NOT_FOUND</span><br><span class="line"><span class="keyword">Error: </span>no device found</span><br><span class="line"><span class="keyword">Error: </span>unable to open ftdi device with vid 0403, pid 6010, description &#x27;*&#x27;, serial &#x27;*&#x27; at bus location &#x27;*&#x27;</span><br><span class="line"><span class="keyword">Error: </span>no device found</span><br><span class="line"><span class="keyword">Error: </span>unable to open ftdi device with vid 0403, pid 6014, description &#x27;*&#x27;, serial &#x27;*&#x27; at bus location &#x27;*&#x27;</span><br><span class="line"></span><br><span class="line">Assertion failed!</span><br></pre></td></tr></table></figure></li><li><p><span style="color:red">本环境下安装 v2.12.36 版本驱动存在问题, 安装 v2.12.28 版本正常.</span></p></li></ul><h2 id="使用-“GDB-Hardware-Debugging”-调试"><a href="#使用-“GDB-Hardware-Debugging”-调试" class="headerlink" title="使用 “GDB Hardware Debugging” 调试"></a>使用 “GDB Hardware Debugging” 调试</h2><ul><li>无需下载, IDE 自带</li><li>按照文档中”<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s2/api-guides/jtag-debugging/using-debugger.html#jtag-debugging-using-debugger-eclipse">使用 Eclipse 调试</a>“进行配置, 调试前需要在终端开启 <strong>openocd</strong>.</li></ul><h3 id="Ubuntu-1"><a href="#Ubuntu-1" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ul><li>如果直接使用 <strong>VSCode</strong> 插件下载的 <strong>ESP-IDF</strong>, 可能会出现 gdb 超时的问题, 可以通过 <strong>Eclipse</strong> 插件重新下载 <strong>ESP-IDF</strong> 来解决.<span style="color:red"> 除此之外, 可以使用下一节的方法进行调试.</span></li></ul><h3 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows"></a>Windows</h3><ul><li><span style="color:red">点击调试按钮没有反应, 暂未解决.</span></li></ul><h2 id="使用-“ESP-IDF-GDB-OpenOCD-Debugging”-调试"><a href="#使用-“ESP-IDF-GDB-OpenOCD-Debugging”-调试" class="headerlink" title="使用 “ESP-IDF GDB OpenOCD Debugging” 调试"></a>使用 “ESP-IDF GDB OpenOCD Debugging” 调试</h2><ul><li>更加方便和通用的方法</li><li>点击工具栏 <strong>Run</strong> -&gt; <strong>Debug Configurations</strong>,   新建 <em><strong>ESP-IDF GDB OpenOCD Debugging</strong></em> 文件.</li></ul><p><img src="/2021/06/10/Eclipse%E4%B8%8BESP-IDF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/1.png" alt="Debug Configurations"></p><h3 id="Ubuntu-2"><a href="#Ubuntu-2" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ul><li><p>所有信息自动配置完成, 需要注意的是 <strong>Debugger</strong> -&gt; <em><strong>OpenOCD Setup</strong></em> -&gt; <em><strong>Config options</strong></em> 文本框中内容, 要保证其中的 <strong>.cfg</strong> 文件参数与目标开发板保持一致, 如:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下列参数对应于 ESP32-S2-Kaluga 开发板</span></span><br><span class="line">-s <span class="variable">$&#123;openocd_path&#125;</span><span class="regexp">/share/</span>openocd<span class="regexp">/scripts -f interface/</span>ftdi<span class="regexp">/esp32s2_kaluga_v1.cfg -f board/</span>esp32s2-kaluga-<span class="number">1</span>.cfg</span><br></pre></td></tr></table></figure></li><li><p>配置完成后点击 <em><strong>Debug</strong></em> 可直接调试, 无需在终端打开 <strong>openocd</strong>.</p></li></ul><h3 id="Windows-3"><a href="#Windows-3" class="headerlink" title="Windows"></a>Windows</h3><ul><li>所有信息自动配置完成, 但是默认使用了 Linux 下的环境变量, 所以需要修改命令为实际路径.</li><li><span style="color:red">开启调试会报错, 暂未解决.</span><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error </span>in final launch sequence</span><br><span class="line">Failed to execute MI command:</span><br><span class="line">-target-select remote localhost:3333</span><br><span class="line"><span class="keyword">Error </span>message from debugger back end:</span><br><span class="line">Remote communication error.  Target disconnected.: Success.</span><br><span class="line">Failed to execute MI command:</span><br><span class="line">-target-select remote localhost:3333</span><br><span class="line"><span class="keyword">Error </span>message from debugger back end:</span><br><span class="line">Remote communication error.  Target disconnected.: Success.</span><br><span class="line">Remote communication error.  Target disconnected.: Success.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 下 ESP-IDF 使用总结</title>
      <link href="/2021/06/10/Vscode%E4%B8%8BESP-IDF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/10/Vscode%E4%B8%8BESP-IDF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu 18.04.5 LTS / Windows 7</li><li>VScode 1.56.2</li><li>ESP32-S2-Kaluga-Kit</li></ul><span id="more"></span><h1 id="IDE-安装"><a href="#IDE-安装" class="headerlink" title="IDE 安装"></a>IDE 安装</h1><p>下载安装包后安装即可.</p><h1 id="IDF-环境搭建"><a href="#IDF-环境搭建" class="headerlink" title="IDF 环境搭建"></a>IDF 环境搭建</h1><ul><li>在 <strong>VScode</strong> 插件市场下载插件 <strong>Espressif IDF</strong>.</li><li>安装好 <a href="https://github.com/espressif/vscode-esp-idf-extension">espressif/vscode-esp-idf-extension</a> 中 <em><strong>Prerequisites</strong></em> 相应平台的软件依赖.</li><li>按下 <strong>F1</strong> 打开命令行, 输入 <code>ESP-IDF: Configure ESP-IDF extension</code>, 选择合适的初始化模式<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- EXPRESS             <span class="regexp">//</span> 快速安装, 适合快速入门</span><br><span class="line">- ADVANCED            <span class="regexp">//</span> 自定义配置</span><br><span class="line">- USE EXISTING SETUP  <span class="regexp">//</span> 使用已有 ESP-IDF</span><br></pre></td></tr></table></figure></li><li><strong>Select download server:</strong> 选择 <strong>Espressif</strong> 相对 <strong>Github</strong> 更快。</li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p><span style="color:red">通过<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32s2/get-started/index.html#get-started-set-up-env">文档</a>中”第四步:设置环境变量”, 可能无法将 ESP-IDF 工具的路径加入系统环境变量 <strong>PATH</strong>, 所以需要人为确认是否成功设置了环境变量. 如果设置失败, 可以手动将命令执行窗口中输出的路径添加到 <strong>PATH</strong> 中.</span></p><h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><ul><li>参考<a href="https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/tutorial/basic_use.md">文档</a>.</li></ul><h2 id="基于例程"><a href="#基于例程" class="headerlink" title="基于例程"></a>基于例程</h2><ul><li>命令行输入 <code>ESP-IDF: Show Examples Projects</code>, 选择当前 ESP-IDF, 出现的界面显示了所有的例程.</li><li>选择 <code>blink</code> 并点击 <code>Create project using example blink</code>, 指定保存目录后会自动切换到工程.</li></ul><h1 id="配置-amp-编译-amp-烧录"><a href="#配置-amp-编译-amp-烧录" class="headerlink" title="配置&amp;编译&amp;烧录"></a>配置&amp;编译&amp;烧录</h1><ul><li>命令行输入 <code>ESP-IDF: Set Espressif device target</code>, 根据实际芯片设置.</li><li>命令行输入 <code>ESP-IDF: SDK Configuration editor</code>, 可以对工程进行配置.(VScode 左下角有快捷图标)</li><li>命令行输入 <code>ESP-IDF: Build your project</code>, 编译工程.(VScode 左下角有快捷图标)</li><li>命令行输入 <code>ESP-IDF: Size analysis of the binaries</code>, 可以对二进制文件进行内存分析.</li><li>命令行输入 <code>ESP-IDF:Device Configuration</code>, 根据目标开发板对 “Openocd Config files” 进行修改, 如:<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应于 ESP32-S2-Kaluga-Kit 开发板</span></span><br><span class="line"><span class="attribute">interface</span>/ftdi/esp<span class="number">32</span>s<span class="number">2</span>_kaluga_v<span class="number">1</span>.cfg,board/esp<span class="number">32</span>s<span class="number">2</span>-kaluga-<span class="number">1</span>.cfg</span><br></pre></td></tr></table></figure></li><li>命令行输入 <code>ESP-IDF: Flash your project</code>, 执行烧录.(VScode 左下角有快捷图标)</li><li>命令行输入 <code>ESP-IDF: Monitor your device</code>, 打开串口监视器.(VScode 左下角有快捷图标)</li></ul><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><ul><li><p><a href="https://github.com/espressif/vscode-esp-idf-extension/blob/master/docs/tutorial/debugging.md">参考文档</a></p></li><li><p>按下 <strong>F5</strong> 开启调试.</p></li></ul><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p><span style="color:red">遇到的问题</span>:</p><ul><li>有时开启会报错, 但再次开启可以正常运行.</li><li>在不设断点的情况下, 点击”继续”按钮后调试功能卡死.</li><li>在设置一个断点的情况下, 点击”继续”按钮后能够在该处停止运行, 但再次点击后,程序不能在断点处停止, 此后程序运行异常.</li><li>“单步运行”和”观察变量”功能正常.</li></ul><h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p><span style="color:red">无法开启调试.</span></p>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过 Doxygen+Breathe+Sphinx 生成代码文档</title>
      <link href="/2021/06/08/%E9%80%9A%E8%BF%87%20Doxygen+Breathe+Sphinx%20%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/"/>
      <url>/2021/06/08/%E9%80%9A%E8%BF%87%20Doxygen+Breathe+Sphinx%20%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Ubuntu16.04</li><li>Doxygen</li><li>Breathe, Sphinx (安装在同一 python 环境下)</li></ul><span id="more"></span><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>通过 <strong>Doxygen</strong> 生成 <em><strong>xml</strong></em> 文件;</li><li>使用 <strong>Sphinx</strong> 建立文档工程;</li><li>修改工程下 <strong>Sphinx</strong> 的配置文件, 通过 <strong>Breathe</strong> 导入 <em><strong>xml</strong></em> 文件.</li></ol><h2 id="Doxygen"><a href="#Doxygen" class="headerlink" title="Doxygen"></a>Doxygen</h2><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doxygen <span class="literal">-g</span> [<span class="type">fime_name</span>]    <span class="comment"># file_name 默认为 Doxyfile</span></span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>推荐模板如下:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目名称，将作为于所生成的程序文档首页标题</span></span><br><span class="line">PROJECT_NAME            = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文档版本号，可对应于项目版本号，譬如 svn、cvs 所生成的项目版本号</span></span><br><span class="line">PROJECT_NUMBER          = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序文档输出目录</span></span><br><span class="line">OUTPUT_DIRECTORY        =  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 程序文档输入目录 </span></span><br><span class="line">INPUT                   = </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 程序文档语言环境</span></span><br><span class="line">OUTPUT_LANGUAGE         = Chinese</span><br><span class="line">DOXYFILE_ENCODING       = UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只对头文件中的文档化信息生成程序文档 </span></span><br><span class="line">FILE_PATTERNS           = *.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历当前目录的子目录，寻找被文档化的程序源文件 </span></span><br><span class="line">RECURSIVE               = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是制作 C 程序文档，该选项必须设为 YES，否则默认生成 C++ 文档格式</span></span><br><span class="line">OPTIMIZE_OUTPUT_FOR_C   = YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#提取信息，包含类的私有数据成员和静态成员</span></span><br><span class="line">EXTRACT_ALL             = yes</span><br><span class="line">EXTRACT_PRIVATE         = yes</span><br><span class="line">EXTRACT_STATIC          = yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于使用 typedef 定义的结构体、枚举、联合等数据类型，只按照 typedef 定义的类型名进行文档化</span></span><br><span class="line">TYPEDEF_HIDES_STRUCT    = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 C++ 程序文档中，该值可以设置为 NO，而在 C 程序文档中，由于 C 语言没有所谓的域/名字空间这样的概念，所以此处设置为 YES</span></span><br><span class="line">HIDE_SCOPE_NAMES        = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 doxygen 静悄悄地为你生成文档，只有出现警告或错误时，才在终端输出提示信息</span></span><br><span class="line">QUIET                   = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历示例程序目录的子目录，寻找被文档化的程序源文件</span></span><br><span class="line">EXAMPLE_RECURSIVE       = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许程序文档中显示本文档化的函数相互调用关系</span></span><br><span class="line">REFERENCED_BY_RELATION  = YES</span><br><span class="line">REFERENCES_RELATION     = YES</span><br><span class="line">REFERENCES_LINK_SOURCE  = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不生成 latex 格式的程序文档</span></span><br><span class="line">GENERATE_LATEX          = NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在程序文档中允许以图例形式显示函数调用关系，前提是你已经安装了 graphviz 软件包</span></span><br><span class="line">HAVE_DOT                = YES</span><br><span class="line">CALL_GRAPH              = YES</span><br><span class="line">CALLER_GRAPH            = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在最后生成的文档中，把所有的源代码包含在其中</span></span><br><span class="line">SOURCE_BROWSER          = YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这会在HTML文档中，添加一个侧边栏，并以树状结构显示包、类、接口等的关系</span></span><br><span class="line"><span class="comment"># GENERATE_TREEVIEW     ＝ ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 xml 格式的程序文档, 为了能够被 Sphinx 使用</span></span><br><span class="line">GENERATE_XML            = YES</span><br></pre></td></tr></table></figure><h3 id="生成-xml-文件"><a href="#生成-xml-文件" class="headerlink" title="生成 xml 文件"></a>生成 <em><strong>xml</strong></em> 文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doxygen cfg_file      <span class="comment"># cfg_file 为修改好的配置文件</span></span><br></pre></td></tr></table></figure><p>使用命令后, 可以看到目录下新增了与配置文件同名的文件夹, 里面有 <em><strong>html</strong></em> 和 <em><strong>xml</strong></em> 两个子目录, 其中 <em><strong>xml</strong></em> 是后面需要用到的.</p><h2 id="Sphinx-Breathe"><a href="#Sphinx-Breathe" class="headerlink" title="Sphinx, Breathe"></a>Sphinx, Breathe</h2><h3 id="建立初始工程"><a href="#建立初始工程" class="headerlink" title="建立初始工程"></a>建立初始工程</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sphinx<span class="literal">-quickstart</span></span><br></pre></td></tr></table></figure><p>使用命令后提示配置工程, 完成后目录结构如下 (build, source分离):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line">  <span class="string">|---</span> <span class="string">build</span>            <span class="comment"># 用于保存编译后生成的文件</span></span><br><span class="line">  <span class="string">|---</span> <span class="string">source</span>           <span class="comment"># 用于保存资源文件(可以放置自定义 rst 文件等)</span></span><br><span class="line">    <span class="string">|---</span> <span class="string">_static</span></span><br><span class="line">    <span class="string">|---</span> <span class="string">_templates</span></span><br><span class="line">    <span class="string">|---</span> <span class="string">conf.py</span>        <span class="comment"># 工程配置文件</span></span><br><span class="line">    <span class="string">|---</span> <span class="string">index.rst</span>      <span class="comment"># 总目录文件</span></span><br><span class="line">  <span class="string">|---</span> <span class="string">make.bat</span></span><br><span class="line">  <span class="string">|---</span> <span class="string">Makefile</span>         <span class="comment"># 用于执行 make 编译</span></span><br></pre></td></tr></table></figure><h3 id="修改配置文件-conf-py"><a href="#修改配置文件-conf-py" class="headerlink" title="修改配置文件 conf.py"></a>修改配置文件 conf.py</h3><p>目的是通过 <strong>Breathe</strong> 导入 <strong>Doxygen</strong> 生成的 <em><strong>xml</strong></em> 文件 (<a href="https://breathe.readthedocs.io/en/latest/quickstart.html">Breathe 文档</a>).</p><p>总结如下:</p><ul><li><strong>Breathe</strong> 和 <strong>Doxygen</strong> 在同一 python 环境下的话, 无需配置 <strong>Breathe</strong> 路径.</li><li><em><strong>extensions</strong></em> 字段新增 <code>&#39;breathe&#39;</code> </li><li>添加 <em><strong>xml</strong></em> 文件路径/工程<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">breathe_projects = &#123;                            <span class="comment"># 工程名为 Doxygen 配置文件 PROJECT_NAME,</span></span><br><span class="line">  <span class="string">&quot;myproject1&quot;</span>: <span class="string">&quot;/home/me/docproj/doxyxml1/&quot;</span>,   <span class="comment"># 每个工程名对应一个 xml 文件夹,</span></span><br><span class="line">  <span class="string">&quot;myproject2&quot;</span>: <span class="string">&quot;/home/me/docproj/doxyxml2/&quot;</span>,   <span class="comment"># 用于被 rst 文件指令调用,</span></span><br><span class="line">  ...                                           <span class="comment"># 如 doxygenindex</span></span><br><span class="line">&#125;</span><br><span class="line">breathe_default_project = <span class="string">&quot;myproject&quot;</span>           <span class="comment"># 默认工程名</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="在-rst-文件中使用"><a href="#在-rst-文件中使用" class="headerlink" title="在 rst 文件中使用"></a>在 rst 文件中使用</h3><p>如:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">directives:</span></span><br><span class="line"></span><br><span class="line">.. doxygenindex::</span><br><span class="line">.. doxygenfunction::</span><br><span class="line">.. doxygenstruct::</span><br><span class="line">.. doxygenenum::</span><br><span class="line">.. doxygentypedef::</span><br><span class="line">.. doxygenclass::</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">example:</span></span><br><span class="line"></span><br><span class="line">.. doxygenindex::</span><br><span class="line">    :project: PROJECT_NAME          <span class="meta"># conf.py 中 breathe_projects 包含的项目名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git使用总结</title>
      <link href="/2021/06/04/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Ubuntu18.04</li><li>Git 2.17.1</li><li>Github</li></ul><span id="more"></span><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ol><li> 本地新建文件夹 <span style="color:blue">hello_world</span> 及其目录下的 <span style="color:blue">main.c</span></li></ol>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello_world</span><br><span class="line">cd hello_world/</span><br><span class="line">touch hello_world.c</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化本地 Git 项目, 将 <span style="color:blue">main.c</span> 添加进去并提交到本地仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add main.c</span><br><span class="line">git commit -m &quot;init&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 GitHub 上新建项目 <span style="color:blue">hello_world</span> , 使用网页上提供的命令, 将本地仓库推送到云端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/fairytail655/hello_world.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="提交项目"><a href="#提交项目" class="headerlink" title="提交项目"></a>提交项目</h3><ol><li>从 Github 下载项目 <span style="color:blue">hello_world</span> 到本地</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/fairytail655/hello_world.git</span><br><span class="line">cd hello_world/</span><br></pre></td></tr></table></figure><ol start="2"><li>新建并进入分支 <span style="color:blue">local</span> , 向 Github 提交该分支</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b local</span><br><span class="line">git push --set-upstream origin local</span><br></pre></td></tr></table></figure><ol start="3"><li>修改本地 <span style="color:blue">main.c</span> 文件, 并提交修改, 模拟本地项目开发</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;hello world 1&quot; &gt;&gt; main.c</span><br><span class="line">git add main.c # 或者使用 git add * 添加所有修改</span><br><span class="line">git commit -m &quot;push_test1&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;hello world 2&quot; &gt;&gt; main.c</span><br><span class="line">git add main.c # 或者使用 git add * 添加所有修改</span><br><span class="line">git commit -m &quot;push_test2&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在 Github 上修改分支 <span style="color:blue">main</span> 下的 <span style="color:blue">main.c</span> 文件, 模拟同事协作开发</p></li><li><p>本地切换至分支 <span style="color:blue">main</span>, 从 Github 下拉最新的修改</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><ol start="6"><li>本地切换至分支 <span style="color:blue">local</span>, 合并之前的 commit 为一个完整的 commit</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout local</span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><ol start="7"><li>合并分支 <span style="color:blue">main</span>, 并提交到 Github</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase main</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><ol start="8"><li>在 Github 上查看分支 <span style="color:blue">local</span> 下的 <span style="color:blue">main.c</span> 文件, 可以发现修改上传成功</li></ol><h3 id="其他常见操作"><a href="#其他常见操作" class="headerlink" title="其他常见操作"></a>其他常见操作</h3><ol><li>查看文件提交状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ol start="2"><li>查看修改历史</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><ol start="3"><li>撤销文件修改</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- [file_name]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令总结</title>
      <link href="/2021/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ul><li>目录切换 <code>cd</code></li><li>目录创建 <code>mkdir</code></li><li>查看目录内容 <code>ls [-l|a] [dir]</code></li></ul><p><img src="https://img-blog.csdnimg.cn/20190428140017647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Jvb2tpZXhpYW9NdV9h,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><span id="more"></span><ul><li><p>权限修改 <code>chmod [a|u|g|o][+|-|=][r|w|x|-] file</code> </p></li><li><p>文件搜索 <code>find [dir] [-name file/dir]</code></p></li><li><p>文件重命名/移动 <code>mov</code></p></li><li><p>复制 <code>cp [-r] src des</code></p></li><li><p>文件内容显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat file# 显示文件所有的内容</span><br><span class="line">more file# 显示一屏就暂停</span><br><span class="line">less file# 向前向后翻页显示文件</span><br><span class="line">head [-n num] file # 显示文件前num(默认10)行</span><br><span class="line">tail [-n num] file# 显示文件后num(默认10)行</span><br></pre></td></tr></table></figure></li><li><p>创建文件 <code>touch</code></p></li><li><p>文件压缩/解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar [options] des src</span><br><span class="line">[options]: -c压缩</span><br><span class="line">-x解压</span><br><span class="line">-v  显示过程详细信息</span><br><span class="line">-jbzip2</span><br><span class="line">-zgzip</span><br><span class="line">examples:</span><br><span class="line">tar -cjf test.tar.bz2 test# 将 test 压缩成 test.tar.bz2</span><br><span class="line">tar -xjf test.tar.bz2# 将 test.tar.bz2 解压为 test</span><br><span class="line">tar -czf test.tar.gz test# 将 test 压缩成 test.tar.gz</span><br><span class="line">tar -xzf test.tar.gz# 将 test.tar.gz 解压为 test</span><br></pre></td></tr></table></figure></li><li><p>查看当前路径 <code>pwd</code></p></li><li><p>查看进程 <code>ps [a|u|x]</code></p></li><li><p>关闭进程 <code>kill -9 process_id</code></p></li><li><p>通过管道查找字符串 <code>ll | grep test</code></p></li><li><p>关机 <code>shutdown -h now</code></p></li><li><p>重启 <code>reboot</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编程规范总结</title>
      <link href="/2021/06/04/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/"/>
      <url>/2021/06/04/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h3><p>Apache License 2.0</p><span id="more"></span><h3 id="C代码风格"><a href="#C代码风格" class="headerlink" title="C代码风格"></a>C代码风格</h3><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul><li>只作用于单个文件内的变量或函数应声明为 <code>static</code>.</li><li>需要被外部调用的变量或函数应以所在组件或模块名为前缀, 如 <code>esp_vfs_register()</code>.</li><li>静态变量应以 <code>s_</code> 开头.</li><li>避免不必要的缩写, 如不应采用 <code>data -&gt; dat</code>.</li></ul><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><p>单次缩进为 4 个空格, 不应插入 tabs 进行缩进.</p><h4 id="垂直方向"><a href="#垂直方向" class="headerlink" title="垂直方向"></a>垂直方向</h4><ul><li>相邻函数间隔 1 个空行.</li><li>函数起始行和终止行不应为空行.</li><li>在不影响代码可读性的前提下, 单行长度最大为 120 个字符.</li></ul><h4 id="水平方向"><a href="#水平方向" class="headerlink" title="水平方向"></a>水平方向</h4><ul><li><p>在 <code>if, switch, for</code> 等关键词和邻近括号间添加 1 个空格, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (contion) &#123;<span class="comment">// 正确</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(contion) &#123;<span class="comment">// 错误</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二元运算符(如 <code>+, -</code> 等)应在两边添加空格(<code>*, /, ., -&gt;</code> 除外), 一元运算符无需空格.</p></li><li><p>有些情况可以通过添加空格増强代码可读性, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_D6,   I2S0I_DATA_IN14_IDX, <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_D7,   I2S0I_DATA_IN15_IDX, <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_HREF, I2S0I_H_ENABLE_IDX,  <span class="literal">false</span>);</span><br><span class="line">esp_rom_gpio_connect_in_signal(PIN_CAM_PCLK, I2S0I_DATA_IN15_IDX, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li><li><p>行尾不能有空白.</p></li></ul><h4 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h4><ul><li><p>函数首行与花括号应分离为两行, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> arg)</span><span class="comment">// 正确</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;<span class="comment">// 错误</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数体内的分支语句与邻近的花括号应放置在同一行, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    do_one();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (other_condition) &#123;</span><br><span class="line">    do_two();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li><p>单行注释应使用 <code>//</code>, 多行注释使用 <code>//</code> 和 <code>/* */</code> 均可.</p></li><li><p>不必要的注释代码应删除, 如果该代码确实需要(如未实现的接口函数), 则添加注释, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_something</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setup_dma();</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> we should load resources here, but loader is not fully integrated yet.</span></span><br><span class="line">    <span class="comment">// load_resources();</span></span><br><span class="line">    start_timer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>#if 0 .. #endif</code>同上一点.</p></li><li><p>不应添加作者和改动日期相关的琐碎的注释.</p></li></ul><h4 id="行尾"><a href="#行尾" class="headerlink" title="行尾"></a>行尾</h4><p>所有行应以 Unix 风格的 <strong>LF</strong> 结尾.</p><h4 id="格式化工具"><a href="#格式化工具" class="headerlink" title="格式化工具"></a>格式化工具</h4><ul><li><p>安装 <code>astyle</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install astyle</span><br></pre></td></tr></table></figure></li><li><p>使用 ESP-IDF 目录下的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools/format.sh test/test.c</span><br></pre></td></tr></table></figure></li></ul><h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>采用”蛇形命名法”并以 <code>_t</code> 结尾.</p><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><p>应通过 <code>typedef</code> 定义, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    MODULE_FOO_ONE,</span><br><span class="line">    MODULE_FOO_TWO,</span><br><span class="line">    MODULE_FOO_THREE</span><br><span class="line">&#125; <span class="keyword">module_foo_t</span>;</span><br></pre></td></tr></table></figure><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><ul><li><p><code>assert.h</code> 中的 <code>assert()</code> 用来检查条件是否为<code>true</code>, 如果条件为<code>false</code>或0, 该函数将调用<code>abort()</code>并触发严重错误.</p></li><li><p><code>assert()</code>仅用于检查不可恢复错误.</p></li><li><p>检查 <code>esp_err_t</code>类型的值应使用 <span style="color:blue">ESP_ERROR_CHECK</span> 宏.</p></li><li><p>可以通过配置 ESP-IDF 项目来失能断言功能, 这样可能会导致”变量定义但未使用”的警告, 可以通过以下方法来避免:</p><ul><li><p><strong>(void)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res = do_something();</span><br><span class="line">assert(res == <span class="number">0</span>);</span><br><span class="line">(<span class="keyword">void</span>)res;</span><br></pre></td></tr></table></figure></li><li><p><strong><strong>attribute</strong>((unused))</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> res __attribute__((unused));</span><br><span class="line"></span><br><span class="line">res = do_something();</span><br><span class="line">assert(res == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">res = do_something_else();</span><br><span class="line">assert(res != <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="头文件保护"><a href="#头文件保护" class="headerlink" title="头文件保护"></a>头文件保护</h4><ul><li><p>面向公共的头文件应使用预处理保护, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FILE_NAME_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_NAME_H</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FILE_NAME_H</span></span></span><br></pre></td></tr></table></figure></li><li><p>为了能够被 C++ 代码使用, C 的头文件应使用 <code>extern &quot;C&quot;</code>, 如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* declarations go here */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Include声明"><a href="#Include声明" class="headerlink" title="Include声明"></a>Include声明</h4><ul><li>C 标准库头文件和其他 POSIX 头文件应使用<code>&lt; &gt;</code>(如<code>#include &lt;stdio.h&gt;</code>).</li><li>其他头文件使用<code>&quot; &quot;</code>.</li><li>遵循以下顺序:<ul><li>C 标准库头文件.</li><li>其他 POSIX 头文件及其通用扩展(如<code>sys/queue.h</code>).</li><li>通用 IDF 头文件(如<code>esp_log.h</code>).</li><li>其他组件头文件(如 FreeRTOS).</li><li>当前组件公共头文件.</li><li>私有头文件.</li></ul></li></ul><h3 id="C-代码风格"><a href="#C-代码风格" class="headerlink" title="C++代码风格"></a>C++代码风格</h3><p>C 代码风格同样适用于 C++ , 下面的内容将进行更多的补充.</p><h4 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h4><p>头文件扩展名为<code>.hpp</code>, 源文件扩展名为<code>.cpp</code>.</p><h4 id="其他命名"><a href="#其他命名" class="headerlink" title="其他命名"></a>其他命名</h4><ul><li><strong>类</strong>和<strong>结构体</strong>应采用首字母大写的”驼峰命名法”, 成员变量和方法应采用”蛇形命名法”.</li><li><strong>命名空间</strong>采用”蛇形命名法”.</li><li>在函数声明的上一行指定<strong>模板</strong>.</li><li>在面向对象编程中, <strong>接口</strong>不应以<code>...接口名</code>为后缀.</li></ul><h4 id="类中成员的顺序"><a href="#类中成员的顺序" class="headerlink" title="类中成员的顺序"></a>类中成员的顺序</h4><ul><li>公有 -&gt; 保护 -&gt; 私有, 省略没有任何成员的部分.</li><li>构造 -&gt; 解析 -&gt; 成员函数 -&gt; 成员变量.</li></ul><h4 id="缩进-1"><a href="#缩进-1" class="headerlink" title="缩进"></a>缩进</h4><ul><li>命名空间内不应缩进.</li><li><strong>类名</strong>, <code>public</code> , <code>protected</code>, <code>private</code>标签的缩进保持一致.</li></ul><h3 id="CMake代码风格"><a href="#CMake代码风格" class="headerlink" title="CMake代码风格"></a>CMake代码风格</h3><ul><li>采用 4 空格缩进.</li><li>单行最大长度为 120 个字符, 单行分离时要保证可读性.</li><li>不应在可选括号内填入内容, 如<code>endforeach()</code>, <code>endif()</code>.</li><li>命令, 函数和宏使用小写命名.</li><li>本地作用域变量使用小写.</li><li>全局作用域变量使用大写.</li><li>其他遵循 <code>cmake-lint</code> 项目的默认设置.</li></ul><h3 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h3><p>代码风格工具</p>]]></content>
      
      
      <categories>
          
          <category> Intern </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
